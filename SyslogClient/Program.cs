using CommonContracts;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Security.Principal;
using System.ServiceModel;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace SyslogClient
{
    class Program
    {
        static void Main(string[] args)
        {
            ChannelFactory<ICertServices> certFactory;
            ICertServices _certProxy;
            X509Certificate2 certificate = null;



            Console.WriteLine("Choose mode:");
            Console.WriteLine("1. Create certificate");
            Console.WriteLine("2. Establish connetion to server");
            string mode = Console.ReadLine();


            if (mode == "1")
            {
                NetTcpBinding bindingCert = new NetTcpBinding();
                EndpointAddress addressCert = new EndpointAddress(new Uri("net.tcp://localhost:9999/Receiver"));

                certFactory = new ChannelFactory<ICertServices>(bindingCert, addressCert);
                _certProxy = certFactory.CreateChannel();

                IdentityReference identity = WindowsIdentity.GetCurrent().User;
                SecurityIdentifier sid = (SecurityIdentifier)identity.Translate(typeof(SecurityIdentifier));
                var name = sid.Translate(typeof(NTAccount));
                string nameStr = name.ToString();
                nameStr = nameStr.Substring(nameStr.IndexOf('\\') + 1);

                certificate = _certProxy.CreateCertificate(nameStr);

            }
            else
            {
                NetTcpBinding binding = new NetTcpBinding();
                binding.Security.Transport.ClientCredentialType = TcpClientCredentialType.Certificate;

                EndpointAddress address = new EndpointAddress(new Uri("net.tcp://localhost:2110/IWCFContract"), new X509CertificateEndpointIdentity(certificate));
                string eventData = "-1";
                using (WCFClient proxy = new WCFClient(binding, address,certificate))
                {
                    while (true)
                    {

                        while (Int32.Parse(eventData) < 1 || Int32.Parse(eventData) > 5)
                        {
                            Console.WriteLine("Make new event: ");
                            Console.WriteLine("1. User level messages");
                            Console.WriteLine("2. Security/Authorization messages");
                            Console.WriteLine("3. Messages generated by syslog");
                            Console.WriteLine("4. Log audit");
                            Console.WriteLine("5. Log alert");

                            eventData = Console.ReadLine();
                        }


                        Console.WriteLine("Enter message: ");
                        string messText = Console.ReadLine();

                        proxy.SendMessage(eventData + messText);
                        eventData = "-1";
                    }
                }
            }

        }
    }
}
